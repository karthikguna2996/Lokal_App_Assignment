import React, { useState, useEffect } from 'react';
import { FlatList, Text, View, TouchableOpacity, ActivityIndicator } from 'react-native';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

const JobsScreen = ({ navigation }) => {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [error, setError] = useState(null);

  // Fetch jobs from API
  const fetchJobs = async () => {
    setLoading(true);
    try {
      const response = await axios.get('https://testapi.getlokalapp.com/common/jobs?page=1');
	 // const response = await fetch('https://testapi.getlokalapp.com/common/jobs?page=1');
	 console.log('Response:', response);

      //  response = await response.json();

      setJobs((prevJobs) => [...prevJobs, ...response.data.results]);
      setLoading(false);
    } catch (err) {
      setError(err.message);
      setLoading(false);
    }
  };

  // Call fetchJobs when the component mounts and whenever the page changes
  useEffect(() => {
    fetchJobs();
  }, [page]);

  const handleEndReached = () => {
    if (!loading) {
      setPage(page + 1);
    }
  };

  const bookmarkJob = async (job) => {
    try {
      const storedJobs = await AsyncStorage.getItem('bookmarkedJobs');
      const jobsArray = storedJobs ? JSON.parse(storedJobs) : [];
      jobsArray.push(job);
      await AsyncStorage.setItem('bookmarkedJobs', JSON.stringify(jobsArray));
    } catch (error) {
      console.error('Error bookmarking job', error);
    }
  };

  const renderItem = ({ item }) => (
    <View style={{ padding: 10, margin: 5, backgroundColor: '#f9f9f9', borderRadius: 5 }}>
      <Text>{item.title}</Text>
      <Text>{item.location}</Text>
      <Text>{item.salary}</Text>
      <Text>{item.phone}</Text>
      <TouchableOpacity onPress={() => navigation.navigate('JobDetails', { job: item })}>
        <Text>More Details</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => bookmarkJob(item)}>
        <Text>Bookmark</Text>
      </TouchableOpacity>
    </View>
  );

  return (
    <View style={{ flex: 1 }}>
      {error && <Text>Error: {error}</Text>}
      <FlatList
        data={jobs}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        onEndReached={handleEndReached}
        onEndReachedThreshold={0.1}
        ListFooterComponent={loading ? <ActivityIndicator size="large" /> : null}
      />
    </View>
  );
};

export default JobsScreen;
